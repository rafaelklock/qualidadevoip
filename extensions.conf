;
[general]
;
static=yes
;
; if static=yes and writeprotect=no, you can save dialplan by
; CLI command "dialplan save" too
;
writeprotect=no
;
clearglobalvars=no

; function: ${ENV(VARIABLE)}
;
[globals]
CONSOLE=Console/dsp				; Console interface for demo
;CONSOLE=DAHDI/1
;CONSOLE=Phone/phone0
IAXINFO=guest					; IAXtel username/password
;IAXINFO=myuser:mypass
TRUNK=DAHDI/G2					; Trunk interface
;
;    time (aka. ascending rotary hunt group).
; R: use a round-robin search, starting at the next lowest channel than last
;    time (aka. descending rotary hunt group).
;
TRUNKMSD=1					; MSD digits to strip (usually 1 or 0)
;TRUNK=IAX2/user:pass@provider



[tocaaudio]
exten => _.,1,Noop(==== TOCANDO AUDIO: ${EXTEN} ====)
exten => _.,n,Playback(/var/lib/asterisk/sounds/conversa_real_7)
exten => _.,n,Wait(2)
;exten => _.,n,Playback(/var/lib/asterisk/sounds/cronicasdoreideroma2)
exten => _.,n,Hangup()


exten => s,1,Noop(==== TOCANDO AUDIO: ${EXTEN} ====)
;exten => s,n,Playback(/var/lib/asterisk/sounds/conversa_real_7)
;exten => s,n,Wait(2)
exten => s,n,Playback(/var/lib/asterisk/sounds/cronicasdoreideroma2)
exten => s,n,Hangup()


exten => h,1,Hangup()



[from-trunk]
; Entrada DATORA
exten => _554830360297,1,Answer()
exten => _554830360297,n,Noop(====== RECEBENDO CHAMADA DE: ${CALLERID(num)} - API GOOGLE =======))
exten => _554830360297,n,eagi(pahh.py)
exten => _554830360297,n,GotoIf($[${EXISTS(${GoogleUtterance})}]?hello:bye)
exten => _554830360297,n(hello),System(/usr/src/analise.sh "${CALLERID(num)}" "${GoogleUtterance}")
exten => _554830360297,n(bye),Hangup()


[public]
; entrada GTGROUP
exten => _557140421835,1,Answer()
exten => _557140421835,n,Noop(====== RECEBENDO CHAMADA DE: ${CALLERID(num)} - API GOOGLE =======))
exten => _557140421835,n,eagi(pahh.py)
exten => _557140421835,n,GotoIf($[${EXISTS(${GoogleUtterance})}]?hello:bye)
exten => _557140421835,n(hello),System(/usr/src/analise.sh "${CALLERID(num)}" "${GoogleUtterance}")
exten => _557140421835,n(bye),Hangup()

















[ramaisdeteste]
exten => _55XX.,1,Set(CALLERID(num)=4833334444)
exten => _55XX.,n,Dial(SIP/DATORA-TPE/${EXTEN})
same => n,hangup()

exten => _77,1,Playback(/var/lib/asterisk/sounds/cronicasdoreideroma2)




[default]

exten => _5577,1,Answer()
exten => _5577,n,agi(googletts.agi,"Seja bem vindo à URA interativa! Qual é o seu nome?",pt-BR)
exten => _5577,n,eagi(pahh.py)
exten => _5577,n,Noop(NOME: ${GoogleUtterance})
;exten => _5577,n,System(/usr/src/nome.sh ${GoogleUtterance}) ; analisa nome
exten => _5577,n,Set(NOME=${SHELL(/usr/src/nome.sh ${GoogleUtterance})});
exten => _5577,n,agi(googletts.agi,"Ok ${NOME} prazer",pt-BR,any)
exten => _5577,n,agi(googletts.agi,"prazer em te conhecer!",pt-BR,any)

exten => i,1,agi(googletts.agi,"Invalid extension.",en)
exten => i,n,goto(s,start)

exten => t,1,agi(googletts.agi,"Request timed out.",en)
exten => t,n,goto(s,start)

exten => _5548991518109,1,Set(CALLERID(num)=4833330777)
exten => _5548991518109,n,Dial(SIP/DATORA-TPE/${EXTEN})
same => n,hangup()










;saida do teste

exten => _datora,1,Noop(=== CHAMADA SAINTE DATORA ===)
exten => _datora,n,Set(CALLERID(num)=4833330111)
;exten => _datora,n,Dial(SIP/DATORA-TPE/554830360297)
exten => _datora,n,Dial(SIP/DATORA-TPE/557140421835)
same => n,hangup()


exten => _bft,1,Noop(=== CHAMADA SAINTE BFT ===)
exten => _bft,n,Set(CALLERID(num)=4833330222)
;exten => _bft,n,Dial(SIP/BFT/707533#554830360297) ; 
exten => _bft,n,Dial(SIP/BFT/707533#557140421835)  ;  
same => n,hangup()



exten => interno,1,Answer()
exten => interno,n,Noop(====== RECEBENDO CHAMADA DE: ${CALLERID(num)} - API GOOGLE =======))
exten => interno,n,eagi(pahh.py)
exten => interno,n,GotoIf($[${EXISTS(${GoogleUtterance})}]?hello:bye)
exten => interno,n(hello),System(/usr/src/analise.sh "interno" "${GoogleUtterance}")
exten => interno,n(bye),Hangup()




;exten => 554831817777,1,Progress()
; same => n,Noop(========== AQUI ===========)

;Simple speech recognition
exten => 1234,1,Answer()
exten => 1234,n,agi(speech-recog.agi,pt-BR)
exten => 1234,n,Verbose(1,Voce falou: ${utterance})
exten => 1234,n,Verbose(1,Resultado: ${confidence})
exten => 1234,n,Hangup()

;exten => _554830360297,1,Dial(SIP/778899)
;exten => _554830360297,1,Answer()
;exten => _554830360297,n,Noop(====== API GOOGLE =======))
;exten => _554830360297,n,eagi(pahh.py)
;exten => _554830360297,n,GotoIf($[${EXISTS(${GoogleUtterance})}]?hello:bye)
;exten => _554830360297,n(hello),NoOP(You Said = ${GoogleUtterance})
;exten => _554830360297,n(bye),Hangup()

;exten => h,1,Set(RTCP_data=${CHANNEL(rtpqos,audio,all)})
;exten => h,n,NoOp(RTCP Values : ${RTCP_data})
;exten => h,n,NoOp(Start QoS)
;exten => h,n,NoOp(Local Stream ID: ${CHANNEL(rtpqos,audio,local_ssrc)})
;exten => h,n,NoOp(Remote Stream ID: ${CHANNEL(rtpqos,audio,remote_ssrc)})
;exten => h,n,NoOp(Packets Sent: ${CHANNEL(rtpqos,audio,txcount)})
;exten => h,n,NoOp(Packets Received: ${CHANNEL(rtpqos,audio,rxcount)})
;exten => h,n,NoOp(Local RX Packet Loss Max: ${CHANNEL(rtpqos,audio,local_maxrxploss)})
;exten => h,n,NoOp(Local RX Packet Loss Min: ${CHANNEL(rtpqos,audio,local_minrxploss)})
;exten => h,n,NoOp(Local RX Packet Loss: ${CHANNEL(rtpqos,audio,rxploss)})
;exten => h,n,NoOp(Local RX Packet Loss Norm Dev: ${CHANNEL(rtpqos,audio,local_normdevrxploss)})
;exten => h,n,NoOp(Local RX Packet Loss Std Dev: ${CHANNEL(rtpqos,audio,local_stdevrxploss)})
;exten => h,n,NoOp(Local TX Packet Loss: ${CHANNEL(rtpqos,audio,txploss)})
;exten => h,n,NoOp(Remote RX Packet Loss Max: ${CHANNEL(rtpqos,audio,remote_maxrxploss)})
;exten => h,n,NoOp(Remote RX Packet Loss Min: ${CHANNEL(rtpqos,audio,remote_minrxploss)})
;exten => h,n,NoOp(Remote RX Packet Loss Norm Deviation: ${CHANNEL(rtpqos,audio,remote_normdevrxploss)})
;exten => h,n,NoOp(Remote RX Packet Loss Std Deviation: ${CHANNEL(rtpqos,audio,remote_stdevrxploss)})
;exten => h,n,NoOp(Round Trip Time: ${CHANNEL(rtpqos,audio,rtt)})
;exten => h,n,NoOp(Round Trip Time Max: ${CHANNEL(rtpqos,audio,maxrtt)})
;exten => h,n,NoOp(Round Trip Time Min: ${CHANNEL(rtpqos,audio,minrtt)})
;exten => h,n,NoOp(Round Trip Time Norm Dev: ${CHANNEL(rtpqos,audio,normdevrtt)})
;exten => h,n,NoOp(Round Trip Time Std Dev: ${CHANNEL(rtpqos,audio,stdevrtt)})
;exten => h,n,NoOp(Local RX Jitter: ${CHANNEL(rtpqos,audio,rxjitter)})
;exten => h,n,NoOp(Local TX Jitter: ${CHANNEL(rtpqos,audio,txjitter)})
;exten => h,n,NoOp(Local Jitter Max: ${CHANNEL(rtpqos,audio,local_maxjitter)})
;exten => h,n,NoOp(Local Jitter Min: ${CHANNEL(rtpqos,audio,local_minjitter)})
;exten => h,n,NoOp(Local Jitter Norm Dev: ${CHANNEL(rtpqos,audio,local_normdevjitter)})
;exten => h,n,NoOp(Local Jitter Std Dev: ${CHANNEL(rtpqos,audio,local_stdevjitter)})
;exten => h,n,NoOp(Remote Jitter Max: ${CHANNEL(rtpqos,audio,remote_maxjitter)})
;exten => h,n,NoOp(Remote Jitter Min: ${CHANNEL(rtpqos,audio,remote_minjitter)})
;exten => h,n,NoOp(Remote Jitter Norm Dev: ${CHANNEL(rtpqos,audio,remote_normdevjitter)})
;exten => h,n,NoOp(Remote Jitter Std Dev: ${CHANNEL(rtpqos,audio,remote_stdevjitter)})

